{"version":3,"file":"static/js/786.822a1d56.chunk.js","mappings":"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","sources":["indexedDB/models/todoList.ts","indexedDB/index.ts","pages/TodoList/index.tsx"],"sourcesContent":["import { TodoListType as TempType } from '../../interface/todoList'\r\n\r\nexport interface TodoListType extends TempType {}\r\n\r\nconst dbStructure = '++id, context, isCompleted'\r\n\r\nexport const todoListStore = {\r\n  todoList: dbStructure\r\n}\r\n","import Dexie, { Table } from 'dexie'\r\nimport { TodoListType, todoListStore } from './models/todoList'\r\n\r\nexport class AppDB extends Dexie {\r\n  todoList!: Table<TodoListType, number>\r\n\r\n  constructor() {\r\n    super('AppDB')\r\n    this.version(1).stores({\r\n      ...todoListStore\r\n    })\r\n  }\r\n}\r\n\r\nexport const db = new AppDB()\r\n","import React, { useMemo, useState, useEffect } from 'react'\r\nimport { useArray } from '../../utils/hook'\r\nimport './s_todoList.scss'\r\nimport { Card, Input, Button, Space, Empty } from 'antd'\r\nimport { \r\n  PlusOutlined, \r\n  EditOutlined, \r\n  CheckOutlined, \r\n  DeleteOutlined, \r\n  ReloadOutlined, \r\n  ArrowUpOutlined\r\n} from '@ant-design/icons'\r\nimport { db } from '../../indexedDB'\r\nimport { useLiveQuery } from 'dexie-react-hooks'\r\nimport { TodoListType } from '../../interface/todoList'\r\n\r\ntype TextAreaChangeType = (dataIndex: number, value: string) => void\r\n\r\n// function getLastId(array: Array<TodoListType>): number {\r\n//   if (array.length === 0) return 0\r\n//   return Math.max(...array.map(item => item?.id ?? 0))\r\n// }\r\n\r\nconst TodoList: React.FC = () => {\r\n  const [ isSet, setIsSet ] = useState(false)\r\n  const dbList = useLiveQuery(() => db.todoList.toArray())\r\n\r\n  const [ inputValue, setInputValue ] = useState('')\r\n  \r\n  const [ showStatus, setShowStatus ] = useState('All')\r\n  \r\n  const { list, setList, add, remove, change } = useArray<TodoListType>([])\r\n\r\n  useEffect(() => {\r\n    if (typeof dbList === 'object' && !isSet) {\r\n      setList(dbList)\r\n      setIsSet(true)\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [dbList, isSet])\r\n\r\n  const undoneList = useMemo(() => {\r\n    return list.filter(item => !item.isCompleted)\r\n  }, [list])\r\n\r\n  const completedList = useMemo(() => {\r\n    return list.filter(item => item.isCompleted)\r\n  }, [list])\r\n\r\n  const showList = useMemo(() => {\r\n    switch(showStatus) {\r\n      case 'Active':\r\n        return undoneList\r\n      case 'Completed':\r\n        return completedList\r\n      case 'All':\r\n      default:\r\n        return list\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [list, showStatus])\r\n\r\n  const addData = () => {\r\n    const newData = {\r\n      isCompleted: false,\r\n      context: inputValue\r\n    }\r\n\r\n    const dbResponse = db.todoList.add(newData)\r\n    dbResponse.then(newId => {\r\n      add({\r\n        ...newData,\r\n        id: newId\r\n      })\r\n    })\r\n    \r\n    setInputValue('')\r\n  }\r\n  const editData = (dataIndex: number, dataId: number | undefined) => {\r\n    const curr = list[dataIndex]\r\n    if (curr.isEdit && typeof dataId === 'number') {\r\n      db.todoList.update(dataId, {\r\n        context: curr.context\r\n      })\r\n    }\r\n    change({\r\n      ...curr,\r\n      isEdit: !curr.isEdit\r\n    }, dataIndex)\r\n  }\r\n  const textAreaChange:TextAreaChangeType = (dataIndex, value) => {\r\n    const curr = list[dataIndex]\r\n    change({\r\n      ...curr,\r\n      context: value\r\n    }, dataIndex)\r\n  }\r\n  const checkData = (dataIndex: number, dataId: number | undefined) => {\r\n    const curr = list[dataIndex]\r\n    change({\r\n      ...curr,\r\n      isCompleted: !curr.isCompleted\r\n    }, dataIndex)\r\n\r\n    if (typeof dataId === 'number') {\r\n      db.todoList.update(dataId, {\r\n        isCompleted: !curr.isCompleted\r\n      })\r\n    }\r\n  }\r\n  const deleteData = (dataIndex: number, dataId: number | undefined) => {\r\n    if (typeof dataId === 'number') db.todoList.delete(dataId)\r\n    \r\n    remove(dataIndex)\r\n  }\r\n\r\n  return (\r\n    <div className='todo-container'>\r\n      <Space className=\"todo-input\">\r\n        <Input\r\n          value={inputValue}\r\n          size=\"large\" \r\n          style={{ minWidth: '150px' }}\r\n          onChange={(e) => {setInputValue(e.target.value)}}\r\n          onKeyUp={e => {\r\n            if (e.key === 'Enter') addData()\r\n          }}\r\n        />\r\n        <Button \r\n          type=\"primary\" \r\n          shape=\"circle\" \r\n          icon={<PlusOutlined />}\r\n          onClick={addData}\r\n        />\r\n      </Space>\r\n\r\n      <Space className=\"todo-filter\">\r\n        {\r\n          ['Active', 'Completed', 'All'].map(status => {\r\n            const type = showStatus === status ? 'primary' : 'default'\r\n            return (\r\n              <Button \r\n                key={status}\r\n                shape=\"round\" \r\n                type={type}\r\n                onClick={() => {setShowStatus(status)}}\r\n              >\r\n                {status}\r\n              </Button>\r\n            )\r\n          })\r\n        }\r\n      </Space>\r\n\r\n      <div className=\"todo-list\">\r\n        { \r\n          showList.length > 0 ?\r\n          showList.map((item, itemIndex) => {\r\n            const { id, context, isCompleted, isEdit } = item\r\n            return (<Card key={id}>\r\n              <Card.Grid style={{ minWidth: '250px', background: isCompleted ? '#cde9cd' : '' }}>\r\n                <div style={{ height: '60px' }}>\r\n                {\r\n                  isEdit ? \r\n                  <Input.TextArea\r\n                    value={context}\r\n                    onChange={(e) => textAreaChange(itemIndex, e.target.value)}\r\n                    autoSize={{ minRows: 2, maxRows: 2 }}\r\n                  /> : <div className='card-text'>{context}</div>\r\n                }\r\n                </div>\r\n                <Space className=\"card-btn\">\r\n                  <Button \r\n                    type='text' \r\n                    shape=\"circle\"\r\n                    size=\"large\"\r\n                    icon={ isEdit ?\r\n                      <ArrowUpOutlined style={{color: '#000000e0'}}/>:\r\n                      <EditOutlined style={{color: '#000000e0'}}/>\r\n                    }\r\n                    onClick={() => editData(itemIndex, id)}\r\n                  />\r\n                  <Button \r\n                    type='text' \r\n                    shape=\"circle\"\r\n                    size=\"large\"\r\n                    icon={ isCompleted ?\r\n                      <ReloadOutlined style={{color: '#faad14'}}/>:\r\n                      <CheckOutlined style={{color: '#52c41a'}}/>\r\n                    }\r\n                    onClick={() => checkData(itemIndex, id)}\r\n                  />\r\n                  <Button \r\n                    type='text' \r\n                    shape=\"circle\"\r\n                    size=\"large\"\r\n                    icon={<DeleteOutlined style={{color: '#f56c6c'}}/>}\r\n                    onClick={() => deleteData(itemIndex, id)}\r\n                  />\r\n                </Space>\r\n              </Card.Grid>\r\n            </Card>)\r\n          }) :\r\n          <Empty description={false} className=\"todo-empty\"/>\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoList"],"names":["todoListStore","todoList","db","version","stores","Dexie","useState","isSet","setIsSet","dbList","useLiveQuery","toArray","inputValue","setInputValue","showStatus","setShowStatus","useArray","list","setList","add","remove","change","useEffect","undoneList","useMemo","filter","item","isCompleted","completedList","showList","addData","newData","context","then","newId","id","className","value","size","style","minWidth","onChange","e","target","onKeyUp","key","type","shape","icon","PlusOutlined","onClick","map","status","length","itemIndex","isEdit","background","height","dataIndex","curr","textAreaChange","autoSize","minRows","maxRows","ArrowUpOutlined","color","EditOutlined","dataId","update","editData","ReloadOutlined","CheckOutlined","checkData","DeleteOutlined","description"],"sourceRoot":""}