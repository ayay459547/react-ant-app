{"version":3,"file":"static/js/594.8b921597.chunk.js","mappings":"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","sources":["pages/TodoList/index.tsx","utils/hook.ts"],"sourcesContent":["import React, { useMemo, useState, useEffect } from 'react'\r\nimport { useArray } from '../../utils/hook'\r\nimport './s_todoList.scss'\r\nimport { Card, Input, Button, Space, Empty } from 'antd'\r\nimport { PlusOutlined, EditOutlined, CheckOutlined, DeleteOutlined, ReloadOutlined, ArrowUpOutlined } from '@ant-design/icons'\r\n\r\ninterface CardDataType {\r\n  id: number\r\n  context: string\r\n  isCompleted: boolean\r\n  isEdit?: boolean\r\n}\r\n\r\ntype TextAreaChangeType = (dataIndex: number, value: string) => void\r\n\r\nfunction getData () {\r\n  return Promise.resolve([])\r\n}\r\n\r\nfunction getLastId(array: Array<CardDataType>): number {\r\n  if (array.length === 0) return 0\r\n  return Math.max(...array.map(item => item?.id ?? 0))\r\n}\r\n\r\nconst TodoList: React.FC = () => {\r\n  const [ inputValue, setInputValue ] = useState('')\r\n\r\n  const [ showStatus, setShowStatus ] = useState('All')\r\n\r\n  const { value: list, setValue: setList, add, remove, change } = useArray<CardDataType>([])\r\n\r\n  useEffect(() => {\r\n    console.log('init')\r\n    getData().then(data => {\r\n      setList(data)\r\n    })\r\n  }, [])\r\n\r\n  const undoneList = useMemo(() => {\r\n    return list.filter(item => !item.isCompleted)\r\n  }, [list])\r\n\r\n  const completedList = useMemo(() => {\r\n    return list.filter(item => item.isCompleted)\r\n  }, [list])\r\n\r\n  const showList = useMemo(() => {\r\n    switch(showStatus) {\r\n      case 'Active':\r\n        return undoneList\r\n      case 'Completed':\r\n        return completedList\r\n      case 'All':\r\n      default:\r\n        return list\r\n    }\r\n  }, [list, showStatus])\r\n\r\n  const addData = () => {\r\n    const newId = getLastId(list) + 1\r\n    add({\r\n      id: newId,\r\n      isCompleted: false,\r\n      context: inputValue\r\n    })\r\n    setInputValue('')\r\n  }\r\n  const editData = (dataIndex: number) => {\r\n    const curr = list[dataIndex]\r\n    change({\r\n      ...curr,\r\n      isEdit: !curr.isEdit\r\n    }, dataIndex)\r\n  }\r\n  const textAreaChange:TextAreaChangeType = (dataIndex, value) => {\r\n    const curr = list[dataIndex]\r\n    change({\r\n      ...curr,\r\n      context: value\r\n    }, dataIndex)\r\n  }\r\n  const checkData = (dataIndex: number) => {\r\n    const curr = list[dataIndex]\r\n    change({\r\n      ...curr,\r\n      isCompleted: !curr.isCompleted\r\n    }, dataIndex)\r\n  }\r\n  const deleteData = (dataIndex: number) => {\r\n    remove(dataIndex)\r\n  }\r\n\r\n  return (\r\n    <div className='todo-container'>\r\n      <Space className=\"todo-input\">\r\n        <Input\r\n          value={inputValue}\r\n          size=\"large\" style={{ width: '300px' }}\r\n          onChange={(e) => {setInputValue(e.target.value)}}\r\n        />\r\n        <Button \r\n          type=\"primary\" \r\n          shape=\"circle\" \r\n          icon={<PlusOutlined />}\r\n          onClick={addData}\r\n        />\r\n      </Space>\r\n\r\n      <Space className=\"todo-filter\">\r\n        {\r\n          ['Active', 'Completed', 'All'].map(status => {\r\n            const type = showStatus === status ? 'primary' : 'default'\r\n            return (\r\n              <Button \r\n                key={status}\r\n                shape=\"round\" \r\n                type={type}\r\n                onClick={() => {setShowStatus(status)}}\r\n              >\r\n                {status}\r\n              </Button>\r\n            )\r\n          })\r\n        }\r\n      </Space>\r\n\r\n      <div className=\"todo-list\">\r\n        { \r\n          showList.length > 0 ?\r\n          showList.map((item, itemIndex) => {\r\n            const { id, context, isCompleted, isEdit } = item\r\n            return (<Card key={id}>\r\n              <Card.Grid style={{ width: '300px', background: isCompleted ? '#cde9cd' : '' }}>\r\n                <div style={{ height: '60px' }}>\r\n                {\r\n                  isEdit ? \r\n                  <Input.TextArea\r\n                    value={context}\r\n                    onChange={(e) => textAreaChange(itemIndex, e.target.value)}\r\n                    autoSize={{ minRows: 2, maxRows: 2 }}\r\n                  /> : <div className='card-text'>{context}</div>\r\n                }\r\n                </div>\r\n                <Space className=\"card-btn\">\r\n                  <Button \r\n                    type='text' \r\n                    shape=\"circle\"\r\n                    size=\"large\"\r\n                    icon={ isEdit ?\r\n                      <ArrowUpOutlined style={{color: '#000000e0'}}/>:\r\n                      <EditOutlined style={{color: '#000000e0'}}/>\r\n                    }\r\n                    onClick={() => editData(itemIndex)}\r\n                  />\r\n                  <Button \r\n                    type='text' \r\n                    shape=\"circle\"\r\n                    size=\"large\"\r\n                    icon={ isCompleted ?\r\n                      <ReloadOutlined style={{color: '#faad14'}}/>:\r\n                      <CheckOutlined style={{color: '#52c41a'}}/>\r\n                    }\r\n                    onClick={() => checkData(itemIndex)}\r\n                  />\r\n                  <Button \r\n                    type='text' \r\n                    shape=\"circle\"\r\n                    size=\"large\"\r\n                    icon={<DeleteOutlined style={{color: '#f56c6c'}}/>}\r\n                    onClick={() => deleteData(itemIndex)}\r\n                  />\r\n                </Space>\r\n              </Card.Grid>\r\n            </Card>)\r\n          }) :\r\n          <Empty description={false} className=\"todo-empty\"/>\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoList","import { useState, useEffect } from \"react\"\r\n\r\nexport const useMount = (callback: () => void = () => {}) => {\r\n  const [mounted, setMounted] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (!mounted) {\r\n      setMounted(true)\r\n      callback()\r\n    }\r\n  }, [mounted, callback])\r\n}\r\n\r\nexport const useDebounce = <T>(value: T, delay?: number): T => {\r\n  const [debounceValue, setDebounceValue] = useState(value)\r\n\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => setDebounceValue(value), delay)\r\n    return () => clearTimeout(timeout)\r\n  }, [value, delay])\r\n\r\n  return debounceValue\r\n}\r\n\r\nexport const useArray = <T>(value: T[]) => {\r\n  const [tempValue, setTempValue] = useState(value)\r\n\r\n  return {\r\n    value: tempValue,\r\n    setValue: setTempValue,\r\n    clear() {\r\n      setTempValue([])\r\n    },\r\n    remove(index?: number) {\r\n      const temp = [...tempValue]\r\n\r\n      if (typeof index === 'number') {\r\n        temp.splice(index, 1)\r\n      } else {\r\n        temp.pop()\r\n      }\r\n      setTempValue(temp)\r\n    },\r\n    change(data: T, index: number) {\r\n      console.log(index)\r\n      const temp = [...tempValue]\r\n      temp.splice(index, 1, data)\r\n      setTempValue(temp)\r\n    },\r\n    add(data: T, index?: number) {\r\n      const temp = [...tempValue]\r\n\r\n      if (typeof index === 'number') {\r\n        temp.splice(index, 0, data)\r\n      } else {\r\n        temp.push(data)\r\n      }\r\n      setTempValue(temp)\r\n    }\r\n  }\r\n}\r\n"],"names":["useState","inputValue","setInputValue","showStatus","setShowStatus","value","tempValue","setTempValue","setValue","clear","remove","index","temp","splice","pop","change","data","console","log","add","push","useArray","list","setList","useEffect","Promise","resolve","then","undoneList","useMemo","filter","item","isCompleted","completedList","showList","className","size","style","width","onChange","e","target","type","shape","icon","PlusOutlined","onClick","array","newId","length","Math","max","map","id","context","status","itemIndex","isEdit","background","height","dataIndex","curr","textAreaChange","autoSize","minRows","maxRows","ArrowUpOutlined","color","EditOutlined","editData","ReloadOutlined","CheckOutlined","checkData","DeleteOutlined","description"],"sourceRoot":""}