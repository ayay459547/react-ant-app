{"version":3,"file":"static/js/240.b620c5e0.chunk.js","mappings":"mNAMaA,EAAgB,CAC3BC,SAHkB,8BCOPC,EAAY,CACvBC,SAJsB,cAKtBC,SAJsB,gCCaXC,EAAK,IAdA,0CAKhB,aAAe,IAAD,EAKV,OALU,gBACZ,cAAM,UALRJ,cAAQ,IACRE,cAAQ,IACRC,cAAQ,EAIN,EAAKE,QAAQ,GAAGC,QAAO,kBAClBP,GACAE,IACH,CACJ,CAAC,iBAXe,CAASM,EAAAA,S,oNCPrBC,EAAgB,IAAIC,EAAAA,cAAc,CACpCC,aAAc,+BACdC,OAAQC,wDAENC,EAAS,IAAIC,EAAAA,UAAUN,GAEhBO,EAAiB,yCAAG,WAAOC,GAAc,wGAC7BH,EAAOI,iBAAiB,CAC7CC,MAAO,mBACPF,OAAO,GAAD,OAAKA,GACXG,WAAY,IACZC,YAAa,KAKb,OAOD,OAhBKC,EAAQ,OAUVC,EAAO,GACXC,QAAQC,IAAIH,GAEVC,EADED,EAASI,KAAKC,QACqB,QAAjC,EAA2B,QAA3B,EAAGL,EAASI,KAAKC,QAAQ,UAAE,aAAxB,EAA0BJ,YAAI,QAAI,GAEe,QAApD,EAAoC,QAApC,EAAID,EAA4BI,YAAI,OAAO,QAAP,EAAjC,EAAmCE,aAAK,WAAP,EAAjC,EAA0CC,eAAO,QAAI,GAC7D,kBACMC,QAAQC,QAAQ,CACrBL,KAAMH,KACN,2CACH,gBArB6B,sC,mGCQxBS,EAAa,CACjBC,WAAY,CAAEC,OAAQ,GAAIC,KAAM,IAmElC,EAhEsC,SAACC,GACrC,IAAQC,EAA4CD,EAA5CC,WAAYC,EAAgCF,EAAhCE,SAAUC,EAAsBH,EAAtBG,OAAQC,EAAcJ,EAAdI,UAEtC,EAAmBC,EAAAA,EAAAA,UAAZC,GAAoC,YAA5B,IAEfC,EAAAA,EAAAA,YAAU,WACRD,EAASE,eAAe,CAAEC,MAAOR,GAEnC,GAAG,CAACA,EAAYE,IAchB,OACE,SAAC,IAAK,CACJO,aAAW,EACXD,MAAM,oBACNE,KAAMR,EACNS,SAAUR,EACVS,OAAQ,GAAG,UAEX,UAAC,IAAI,CACHC,KAAK,QACLC,KAAMT,EACNU,SAAU,CAAEjB,KAAM,GAClBF,WAAY,CAAEE,KAAM,IACpBkB,MAAO,CAAEC,SAAU,KACnBC,cAAe,CAAEC,UAAU,GAC3BC,SA3BW,SAACC,GAChB,MAAuBA,EAAfb,MAAAA,OAAK,MAAG,GAAE,EAClBxC,EAAAA,GAAAA,SAAAA,OAAmBiC,EAAU,CAAEO,MAAAA,IAE/BH,EAASiB,cACTnB,GACF,EAsBMoB,eApBiB,SAACC,GACtBrC,QAAQC,IAAI,UAAWoC,EACzB,EAmBMC,aAAa,MAAK,WAElB,SAAC,SAAS,CACRC,MAAM,QACNb,KAAK,QACLc,MAAO,CAAC,CAAEC,UAAU,EAAMpC,QAAS,wBAAyB,UAE5D,SAAC,IAAK,OAGR,SAAC,UAAS,kBAAKG,GAAU,cACvB,UAAC,IAAK,YACJ,SAAC,KAAM,CAACkC,KAAK,UAAUC,SAAS,QAAO,SAAC,WAGxC,SAAC,KAAM,CAACD,KAAK,UAAUC,SAAS,SAAQ,SAAC,qBAQrD,ECnEQC,EAAYC,EAAAA,EAAAA,QA8HpB,EArHkC,SAACjC,GACjC,OAA4BkC,EAAAA,EAAAA,WAAS,GAAK,eAAnCC,EAAM,KAAEC,EAAS,KAExB,GAA4BF,EAAAA,EAAAA,WAAS,GAAM,eAApC/B,EAAM,KAAEkC,EAAS,KACxB,GAA4BH,EAAAA,EAAAA,UAAS,GAAE,eAAhCI,EAAM,KAAEC,EAAS,KACxB,GAAkCL,EAAAA,EAAAA,UAAS,IAAG,eAAvCM,EAAS,KAAEC,EAAY,KACtB1E,EAAuDiC,EAAvDjC,SAAU2E,EAA6C1C,EAA7C0C,QAASC,EAAoC3C,EAApC2C,cAAeC,EAAqB5C,EAArB4C,iBA8C1C,OACE,iBAAKC,UAAS,oBAAeV,EAAS,UAAY,IAAK,WACrD,SAAC,KAAM,CACLU,UAAS,wBAAmBV,EAAS,UAAY,IACjDW,KAAMX,GAAS,SAACY,EAAA,EAAY,KAAM,SAACC,EAAA,EAAa,IAChDC,QAAS,WAAQb,GAAU,SAAAc,GAAQ,OAAKA,CAAQ,GAAE,KAGpD,SAAC,KAAM,CACLC,OAAK,EACLL,MAAM,SAACM,EAAA,EAAY,IACnBP,UAAU,WACVI,QAASP,EAAQ,SAClB,cAID,SAAC,EAAQ,CACPzC,WAAYuC,EACZtC,SAAUoC,EACVnC,OAAQA,EACRC,UAjEY,WAChBiC,GAAU,GACVE,EAAU,GACVE,EAAa,GACf,KAgEI,eAAII,UAAU,YAAW,SAErB9E,EAASsF,KAAI,SAACC,EAAUC,GACtB,OACE,gBAEEV,UAAS,oBAAeS,EAASE,KAAOb,EAAgB,SAAW,IACnEM,QAAS,wBAAML,EAA6B,QAAb,EAAS,OAARU,QAAQ,IAARA,OAAQ,EAARA,EAAUE,UAAE,QAAI,EAAE,EAAC,WAEnD,gBAAKX,UAAU,kBAAiB,SAAES,EAAS7C,SAC3C,iBAAKoC,UAAU,mBAAkB,WAC/B,SAAC,KAAM,CACLf,KAAK,OACL2B,KAAK,QACLX,MAAM,SAACY,EAAA,EAAY,CAACzC,MAAO,CAAC0C,MAAO,aACnCV,QAAS,SAACW,GAAC,OA7EZ,SACfC,EACAC,GAMAD,EAAME,kBACN,IAAQP,EAAcM,EAAdN,GAAI/C,EAAUqD,EAAVrD,MACZ8B,EAAY,OAAFiB,QAAE,IAAFA,EAAAA,EAAM,GAChBf,EAAahC,GACb4B,GAAU,EACZ,CAgEkC2B,CAASJ,EAAG,CAC1BJ,GAAIF,EAASE,GACbS,MAAOV,EACP9C,MAAO6C,EAAS7C,OAChB,KAEJ,SAAC,KAAM,CACLqB,KAAK,OACL2B,KAAK,QACLX,MAAM,SAACoB,EAAA,EAAc,CAACjD,MAAO,CAAC0C,MAAO,aACrCV,QAAS,SAACW,GAAC,OAxEV,SACjBC,EACAC,GAMAD,EAAME,kBACN,IAAQP,EAAcM,EAAdN,GAAI/C,EAAUqD,EAAVrD,MACZuB,EAAQ,CACNc,MAAM,SAACqB,EAAA,EAAyB,IAChCC,SAAS,2BAAK,4BAAM3D,KACpB4D,KAAI,WACgB,kBAAPb,IACTvF,EAAAA,GAAAA,SAAAA,OAAmBuF,GACnBvF,EAAAA,GAAAA,SAAAA,MAAkB,CAAEuF,GAAAA,IAAMc,SAE9B,EACA1D,SAAQ,WAAI,GAEhB,CAmDkC2D,CAAWX,EAAG,CAC5BJ,GAAIF,EAASE,GACbS,MAAOV,EACP9C,MAAO6C,EAAS7C,OAChB,SAxBD6C,EAASE,GA6BpB,QAKV,ECiBA,EA7IuB,WAErB,IAAMgB,GAASC,EAAAA,EAAAA,eAAa,kBAAMxG,EAAAA,GAAAA,SAAAA,SAAqB,IACjDF,GAAW2G,EAAAA,EAAAA,UAAQ,kBAAY,OAANF,QAAM,IAANA,EAAAA,EAAU,EAAE,GAAE,CAACA,IAC9C,GAA0CtC,EAAAA,EAAAA,UAAS,GAAE,eAA9CS,EAAa,KAAEC,EAAgB,KAEhC+B,GAASF,EAAAA,EAAAA,eAAa,kBAAMxG,EAAAA,GAAAA,SAAAA,SAAqB,IACjDD,GAAW0G,EAAAA,EAAAA,UAAQ,kBAAY,OAANC,QAAM,IAANA,EAAAA,EAAU,EAAE,GAAE,CAACA,IAC9C,GAAoCzC,EAAAA,EAAAA,UAAS,IAAG,eAAzCjC,EAAU,KAAE2E,EAAa,KAChC,GAAoC1C,EAAAA,EAAAA,WAAS,GAAM,eAA5C2C,EAAU,KAAEC,EAAa,KAG1BpC,EAAU,WACdzE,EAAAA,GAAAA,SAAAA,IAAgB,CAAEwC,MAAO,oBAC3B,EAEMsE,EAAU,WACVC,GAA8B,KAAf/E,IACnB6E,GAAc,GACS7G,EAAAA,GAAAA,SAAAA,IAAgB,CACrCgH,WAAYtC,EACZuC,KAAM,OACN/F,KAAMc,IAEOkF,MAAI,uBAAC,6GACWvG,EAAkBqB,GAAW,OAApDmF,EAAc,SAEEA,EAAd9F,KAAAA,OAAI,MAAG,GAAE,EAEIrB,EAAAA,GAAAA,SAAAA,IAAgB,CACnCgH,WAAYtC,EACZuC,KAAM,KACN/F,KAAMG,IAGK6F,MAAK,WAChBP,EAAc,IACdE,GAAc,EAChB,IAAE,4CAEN,GAGAvE,EAAAA,EAAAA,YAAU,WACR,IACyB,EADrB+B,EAAS,EACTvE,EAASsH,OAAS,IACpB/C,EAAyC,QAAnC,EAAGvE,EAASA,EAASsH,OAAS,GAAG7B,UAAE,QAAI,GAE/CZ,EAAiBN,EACnB,GAAG,CAACvE,IAEJ,IAAMiH,GAAcN,EAAAA,EAAAA,UAAQ,WAC1B,IAAMY,EAAUvH,EAASsH,QAAU,EAEnC,OADAP,GAAeQ,GACRA,CACT,GAAG,CAACvH,IAEEwH,GAAWb,EAAAA,EAAAA,UAAQ,WACvB,OAAO1G,EAASwH,QAAO,SAAAC,GACrB,OAAOA,EAASR,aAAetC,CACjC,GACF,GAAG,CAACA,EAAe3E,IAanB,OALAuC,EAAAA,EAAAA,YAAU,YANa,WACrB,IAAMmF,EAAYH,EAASF,OACrBM,EAAYC,SAASC,cAAc,kBAAD,OAAmBH,EAAS,OAC3D,OAATC,QAAS,IAATA,GAAAA,EAAWG,eAAe,CAAEC,SAAU,SAAUC,MAAO,OACzD,CAGEC,EAEF,GAAG,CAACjI,KAGF,iBAAK6E,UAAU,iBAAgB,WAC7B,SAAC,EAAI,CACH9E,SAAUA,EACV2E,QAASA,EACTC,cAAeA,EACfC,iBAAkBA,KAGpB,iBAAKC,UAAU,YAAW,UACtBmC,GACA,iBAAKnC,UAAU,aAAY,WACzB,wBAAI,mBACJ,SAAC,KAAM,CACLqD,MAAM,QACNpE,KAAK,UACLgB,MAAM,SAACM,EAAA,EAAY,IACnBH,QAASP,EAAQ,SAClB,iBAIH,eAAIG,UAAU,YAAW,SAErB0C,EAASlC,KAAI,SAACoC,EAAUU,GACtB,OACE,gBAAsBtD,UAAU,YAAY,aAAYsD,EAAgB,EAAE,WACxE,gBAAKtD,UAAU,YAAW,SACJ,OAAlB4C,EAASP,MAAgB,SAACkB,EAAA,EAAa,CAACnF,MAAO,CAAC0C,MAAO,cAAgB,SAAC0C,EAAA,EAAY,CAACpF,MAAO,CAAC0C,MAAO,gBAExG,gBAAKd,UAAU,YAAW,SAAE4C,EAAStG,SAJ9BsG,EAASjC,GAOtB,OAIN,iBAAKX,UAAU,cAAa,WAC1B,UAAC,UAAW,CAACyD,SAAO,aAClB,SAAC,IAAK,CACJC,MAAOtG,EACPgB,MAAO,CAAEuF,MAAO,qBAChB/C,KAAK,QACLgD,UAAW5B,EACX6B,SAAU,SAAC9C,GAAOgB,EAAchB,EAAE+C,OAAOJ,MAAM,EAC/CK,aAAc7B,KAEhB,SAAC,IAAO,CAACtE,MAAM,OAAM,UACnB,SAAC,KAAM,CACLqC,MAAM,SAAC+D,EAAA,EAAY,IACnBpD,KAAK,QACLgD,UAAW5B,EACX5B,QAAS8B,SAKXF,GAAeG,GAEjB,oBADA,gBAAKnC,UAAU,YAAW,SAAC,2CAOvC,C","sources":["indexedDB/models/todoList.ts","indexedDB/models/chat.ts","indexedDB/index.ts","utils/openAi.ts","pages/Chat/EditList.tsx","pages/Chat/Side.tsx","pages/Chat/index.tsx"],"sourcesContent":["import { TodoListType as TempType } from '../../interface/todoList'\r\n\r\nexport interface TodoListType extends TempType {}\r\n\r\nconst dbStructure = '++id, context, isCompleted'\r\n\r\nexport const todoListStore = {\r\n  todoList: dbStructure\r\n}\r\n","import { \r\n  ChatListType as TempListType,\r\n  ChatItemType as TempItemType\r\n} from '../../interface/chat'\r\n\r\nexport interface ChatListType extends TempListType {}\r\nexport interface ChatItemType extends TempItemType {}\r\n\r\nconst dbListStructure = '++id, title'\r\nconst dbItemStructure = '++id, chatListId, from, text'\r\n\r\nexport const chatStore = {\r\n  chatList: dbListStructure,\r\n  chatItem: dbItemStructure\r\n}\r\n\r\n","import Dexie, { Table } from 'dexie'\r\nimport { TodoListType, todoListStore } from './models/todoList'\r\nimport { \r\n  ChatListType,\r\n  ChatItemType,\r\n  chatStore \r\n} from './models/chat'\r\n\r\nexport class AppDB extends Dexie {\r\n  todoList!: Table<TodoListType, number>\r\n  chatList!: Table<ChatListType, number>\r\n  chatItem!: Table<ChatItemType, number>\r\n\r\n  constructor() {\r\n    super('AppDB')\r\n    this.version(2).stores({\r\n      ...todoListStore,\r\n      ...chatStore,\r\n    })\r\n  }\r\n}\r\n\r\nexport const db = new AppDB()\r\n","import { Configuration, OpenAIApi } from \"openai\"\r\nconst configuration = new Configuration({\r\n    organization: \"org-YuIRgm8UHndqVksAj5YXuIop\",\r\n    apiKey: process.env.REACT_APP_OPENAI_API_KEY,\r\n})\r\nconst openai = new OpenAIApi(configuration)\r\n\r\nexport const getOpenAIResponse = async (prompt: string) => {\r\n  const response = await openai.createCompletion({\r\n    model: \"text-davinci-003\",\r\n    prompt: `${prompt}`,\r\n    max_tokens: 100,\r\n    temperature: 0.5,\r\n    // top_p: 1.0,\r\n    // frequency_penalty: 0.5,\r\n    // presence_penalty: 0.0,\r\n    // stop: [\"You:\"],\r\n  })\r\n  let text = ''\r\n  console.log(response)\r\n  if (response.data.choices) {\r\n    text = response.data.choices[0]?.text ?? ''\r\n  } else {\r\n    text = (response as unknown as any).data?.error?.message ?? ''\r\n  }\r\n  return Promise.resolve({\r\n    data: text\r\n  })\r\n}","import React, { useEffect } from 'react'\r\nimport { Modal, Form, Input, Button, Space } from 'antd'\r\nimport { db } from '../../indexedDB'\r\n\r\ninterface PropsType {\r\n  inputValue: string\r\n  updateId: number\r\n  isShow: boolean\r\n  resetTemp: () => void\r\n}\r\n\r\ninterface FormType {\r\n  title: string\r\n}\r\n\r\nconst tailLayout = {\r\n  wrapperCol: { offset: 16, span: 8 }\r\n}\r\n\r\nconst EditList: React.FC<PropsType> = (props) => {\r\n  const { inputValue, updateId, isShow, resetTemp } = props\r\n\r\n  const [editForm] = Form.useForm<FormType>()\r\n\r\n  useEffect(() => {\r\n    editForm.setFieldsValue({ title: inputValue })\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [inputValue, isShow])\r\n\r\n  const onFinish = (values: FormType) => {\r\n    const { title = '' } = values\r\n    db.chatList.update(updateId, { title })\r\n\r\n    editForm.resetFields()\r\n    resetTemp()\r\n  }\r\n  \r\n  const onFinishFailed = (errorInfo: any) => {\r\n    console.log('Failed:', errorInfo)\r\n  }\r\n\r\n  return  (\r\n    <Modal \r\n      forceRender\r\n      title=\"編輯Title\" \r\n      open={isShow}\r\n      onCancel={resetTemp}\r\n      footer={[]}\r\n    >\r\n      <Form\r\n        name=\"basic\"\r\n        form={editForm}\r\n        labelCol={{ span: 4 }}\r\n        wrapperCol={{ span: 20 }}\r\n        style={{ maxWidth: 600 }}\r\n        initialValues={{ remember: true }}\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n        autoComplete=\"off\"\r\n      >\r\n        <Form.Item\r\n          label=\"Title\"\r\n          name=\"title\"\r\n          rules={[{ required: true, message: 'Please input title!' }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item {...tailLayout}>\r\n          <Space>\r\n            <Button type=\"default\" htmlType=\"reset\">\r\n              Reset\r\n            </Button>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Space>\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default EditList","import React, { useState } from 'react'\r\nimport { ChatListType } from '../../interface/chat'\r\nimport { Button, Modal } from 'antd'\r\nimport { \r\n  EditOutlined, \r\n  DeleteOutlined, \r\n  PlusOutlined,\r\n  ExclamationCircleOutlined,\r\n  RightOutlined,\r\n  LeftOutlined,\r\n} from '@ant-design/icons'\r\nimport { db } from '../../indexedDB'\r\nimport EditList from './EditList'\r\n\r\nconst { confirm } = Modal\r\n\r\ninterface PropsType {\r\n  chatList: ChatListType[]\r\n  addList: () => void\r\n  currentChatId: number\r\n  setCurrentChatId: (id: number) => void\r\n}\r\n\r\nconst Side: React.FC<PropsType> = (props) => {\r\n  const [isOpen, setIsOpen] = useState(true)\r\n\r\n  const [isShow, setIsShow] = useState(false)\r\n  const [tempId, setTempId] = useState(0)\r\n  const [tempTitle, setTempTitle] = useState('')\r\n  const { chatList, addList, currentChatId, setCurrentChatId } = props\r\n  \r\n  const resetTemp = () => {\r\n    setIsShow(false)\r\n    setTempId(0)\r\n    setTempTitle('')\r\n  }\r\n\r\n  const editList = (\r\n    event: React.MouseEvent<HTMLAnchorElement, MouseEvent> | React.MouseEvent<HTMLButtonElement, MouseEvent>, \r\n    options: {\r\n      id: number | undefined\r\n      index: number\r\n      title: string\r\n    }\r\n  ) => {\r\n    event.stopPropagation()\r\n    const { id, title } = options\r\n    setTempId(id ?? 0)\r\n    setTempTitle(title)\r\n    setIsShow(true)\r\n  }\r\n\r\n  const deleteList = (\r\n    event: React.MouseEvent<HTMLAnchorElement, MouseEvent> | React.MouseEvent<HTMLButtonElement, MouseEvent>, \r\n    options: {\r\n      id: number | undefined\r\n      index: number\r\n      title: string\r\n    }\r\n  ) => {\r\n    event.stopPropagation()\r\n    const { id, title } = options\r\n    confirm({\r\n      icon: <ExclamationCircleOutlined />,\r\n      content: <div>確定刪除 {title}</div>,\r\n      onOk() {\r\n        if (typeof id === 'number') {\r\n          db.chatList.delete(id)\r\n          db.chatItem.where({ id }).delete()\r\n        }\r\n      },\r\n      onCancel() {}\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className={`chat-side ${isOpen ? 'is-open' : ''}`}>\r\n      <Button\r\n        className={`side-collapse ${isOpen ? 'is-open' : ''}`}\r\n        icon={isOpen ? <LeftOutlined /> : <RightOutlined />} \r\n        onClick={() => { setIsOpen(oddValue => !oddValue) }}\r\n      />\r\n\r\n      <Button \r\n        ghost \r\n        icon={<PlusOutlined />} \r\n        className=\"side-new\"\r\n        onClick={addList}\r\n      >\r\n        New Chat\r\n      </Button>\r\n\r\n      <EditList\r\n        inputValue={tempTitle}\r\n        updateId={tempId}\r\n        isShow={isShow}\r\n        resetTemp={resetTemp}\r\n      />\r\n\r\n      <ul className=\"side-list\">\r\n        {\r\n          chatList.map((chatType, chatTypeIndex) => {\r\n            return (\r\n              <li \r\n                key={chatType.id} \r\n                className={`side-item ${chatType.id === currentChatId ? 'active' : ''}`}\r\n                onClick={() => setCurrentChatId(chatType?.id ?? 0)}\r\n              >\r\n                <div className='side-item-title'>{chatType.title}</div>\r\n                <div className='side-item-button'>\r\n                  <Button \r\n                    type='text'\r\n                    size=\"small\"\r\n                    icon={<EditOutlined style={{color: '#ffffff'}}/>}\r\n                    onClick={(e) => editList(e, {\r\n                      id: chatType.id,\r\n                      index: chatTypeIndex,\r\n                      title: chatType.title\r\n                    })}\r\n                  />\r\n                  <Button \r\n                    type='text'\r\n                    size=\"small\"\r\n                    icon={<DeleteOutlined style={{color: '#ffffff'}}/>}\r\n                    onClick={(e) => deleteList(e, {\r\n                      id: chatType.id,\r\n                      index: chatTypeIndex,\r\n                      title: chatType.title\r\n                    })}\r\n                  />\r\n                </div>\r\n              </li>\r\n            )\r\n          })\r\n        }\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Side","import React, { useState, useEffect, useMemo } from 'react'\r\nimport './s_chat.scss'\r\nimport { Button, Input, Tooltip } from 'antd'\r\nimport { \r\n  PlusOutlined,\r\n  RobotOutlined,\r\n  UserOutlined,\r\n  SendOutlined,\r\n} from '@ant-design/icons'\r\nimport { db } from '../../indexedDB'\r\nimport { useLiveQuery } from 'dexie-react-hooks'\r\nimport { getOpenAIResponse } from '../../utils/openAi'\r\nimport Side from './Side'\r\n\r\nconst Chat: React.FC = () => {\r\n  // chatList\r\n  const dbList = useLiveQuery(() => db.chatList.toArray())\r\n  const chatList = useMemo(() => dbList ?? [], [dbList])\r\n  const [currentChatId, setCurrentChatId] = useState(0)\r\n  // chatItem\r\n  const dbItem = useLiveQuery(() => db.chatItem.toArray())\r\n  const chatItem = useMemo(() => dbItem ?? [], [dbItem])\r\n  const [inputValue, setInputValue] = useState('')\r\n  const [canAddItem, setCanAddItem] = useState(false)\r\n\r\n  // chatList function\r\n  const addList = () => {\r\n    db.chatList.add({ title: 'This is New Chat' })\r\n  }\r\n  // chatItem function\r\n  const addItem = () => {\r\n    if (isChatEmpty || inputValue === '') return\r\n    setCanAddItem(false)\r\n    const dbUserResponse = db.chatItem.add({\r\n      chatListId: currentChatId,\r\n      from: 'user',\r\n      text: inputValue\r\n    })\r\n    dbUserResponse.then(async () => {\r\n      const openAIResponse = await getOpenAIResponse(inputValue)\r\n\r\n      const { data = '' } = openAIResponse\r\n      \r\n      const dbAIResponse = db.chatItem.add({\r\n        chatListId: currentChatId,\r\n        from: 'ai',\r\n        text: data\r\n      })\r\n\r\n      dbAIResponse.then(() => {\r\n        setInputValue('')\r\n        setCanAddItem(true)\r\n      })\r\n    })\r\n  }\r\n\r\n  // show about\r\n  useEffect(() => {\r\n    let tempId = 0\r\n    if (chatList.length > 0) {\r\n      tempId = chatList[chatList.length - 1].id ?? 0\r\n    }\r\n    setCurrentChatId(tempId)\r\n  }, [chatList])\r\n\r\n  const isChatEmpty = useMemo(() => {\r\n    const isEmpty = chatList.length <= 0\r\n    setCanAddItem(!isEmpty)\r\n    return isEmpty\r\n  }, [chatList])\r\n\r\n  const showList = useMemo(() => {\r\n    return chatItem.filter(showItem => {\r\n      return showItem.chatListId === currentChatId\r\n    })\r\n  }, [currentChatId, chatItem])\r\n\r\n  const scrollToBottom = () => {\r\n    const scrollKey = showList.length\r\n    const lastLiDom = document.querySelector(`li[scroll-key=\"${scrollKey}\"]`)\r\n    lastLiDom?.scrollIntoView({ behavior: \"smooth\", block: \"end\" })\r\n  }\r\n\r\n  useEffect(() => {\r\n    scrollToBottom()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [chatItem])\r\n  \r\n  return (\r\n    <div className=\"chat-container\">\r\n      <Side \r\n        chatList={chatList} \r\n        addList={addList} \r\n        currentChatId={currentChatId}\r\n        setCurrentChatId={setCurrentChatId}\r\n      />\r\n\r\n      <div className=\"chat-main\">\r\n        { isChatEmpty ? \r\n          <div className='main-empty'>\r\n            <h3>Chat is Empty</h3>\r\n            <Button\r\n              shape=\"round\" \r\n              type=\"primary\"\r\n              icon={<PlusOutlined />} \r\n              onClick={addList}\r\n            >\r\n              New Chat\r\n            </Button>\r\n          </div> :\r\n          <ul className=\"main-list\">\r\n            {\r\n              showList.map((showItem, showItemIndex) => {\r\n                return (\r\n                  <li key={showItem.id} className=\"main-item\" scroll-key={showItemIndex + 1}>\r\n                    <div className='main-icon'>\r\n                      { showItem.from === 'ai' ? <RobotOutlined style={{color: '#52c41a'}}/> : <UserOutlined style={{color: '#faad14'}}/> }\r\n                    </div>\r\n                    <div className='main-text'>{showItem.text}</div>\r\n                  </li>\r\n                )\r\n              })\r\n            }\r\n          </ul>\r\n        }\r\n        <div className=\"main-submit\">\r\n          <Input.Group compact>\r\n            <Input\r\n              value={inputValue}\r\n              style={{ width: 'calc(100% - 40px)' }}\r\n              size=\"large\"\r\n              disabled={!canAddItem}\r\n              onChange={(e) => {setInputValue(e.target.value)}}\r\n              onPressEnter={addItem}\r\n            />\r\n            <Tooltip title=\"send\">\r\n              <Button \r\n                icon={<SendOutlined />} \r\n                size=\"large\" \r\n                disabled={!canAddItem}\r\n                onClick={addItem}\r\n              />\r\n            </Tooltip>\r\n          </Input.Group>\r\n          {\r\n            (!canAddItem && !isChatEmpty)? \r\n            <div className='main-wait'>waitting for openAi to respond</div> : \r\n            <div></div>\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chat"],"names":["todoListStore","todoList","chatStore","chatList","chatItem","db","version","stores","Dexie","configuration","Configuration","organization","apiKey","process","openai","OpenAIApi","getOpenAIResponse","prompt","createCompletion","model","max_tokens","temperature","response","text","console","log","data","choices","error","message","Promise","resolve","tailLayout","wrapperCol","offset","span","props","inputValue","updateId","isShow","resetTemp","Form","editForm","useEffect","setFieldsValue","title","forceRender","open","onCancel","footer","name","form","labelCol","style","maxWidth","initialValues","remember","onFinish","values","resetFields","onFinishFailed","errorInfo","autoComplete","label","rules","required","type","htmlType","confirm","Modal","useState","isOpen","setIsOpen","setIsShow","tempId","setTempId","tempTitle","setTempTitle","addList","currentChatId","setCurrentChatId","className","icon","LeftOutlined","RightOutlined","onClick","oddValue","ghost","PlusOutlined","map","chatType","chatTypeIndex","id","size","EditOutlined","color","e","event","options","stopPropagation","editList","index","DeleteOutlined","ExclamationCircleOutlined","content","onOk","delete","deleteList","dbList","useLiveQuery","useMemo","dbItem","setInputValue","canAddItem","setCanAddItem","addItem","isChatEmpty","chatListId","from","then","openAIResponse","length","isEmpty","showList","filter","showItem","scrollKey","lastLiDom","document","querySelector","scrollIntoView","behavior","block","scrollToBottom","shape","showItemIndex","RobotOutlined","UserOutlined","compact","value","width","disabled","onChange","target","onPressEnter","SendOutlined"],"sourceRoot":""}